{"version":3,"sources":["id.js","component/SimplePopover.js","component/MediaCard.js","App.js","serviceWorker.js","index.js"],"names":["id","useStyles","makeStyles","theme","typography","padding","spacing","SimplePopover","weather","classes","React","useState","anchorEl","setAnchorEl","open","Boolean","undefined","Button","aria-describedby","variant","onClick","event","currentTarget","style","backgroundColor","Popover","onClose","anchorOrigin","vertical","horizontal","transformOrigin","Typography","className","wind","deg","Math","round","main","temp_max","temp_min","rootSnow","marginTop","borderRadius","paddingTop","paddingBottom","display","flexDirection","textAlign","alignItems","width","height","backgroundSize","backgroundPosition","backgroundImage","rootSunny","yellow","color","darkblue","MediaCard","query","setQuery","toggle","setToggle","w","temp","Card","fontWeight","fontSize","CardActionArea","CardContent","onChange","city","target","value","placeholder","opacity","textTransform","state","marginLeft","marginRight","country","borderWidth","component","name","sys","humidity","description","toUpperCase","CardActions","App","setWeather","useEffect","a","queryString","axios","get","response","data","console","log","getData","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.74ee57f9.chunk.js","sourcesContent":["const id = \"719fd56ec25f1bccf9dbf71e012d4417\";\r\n\r\nexport default id;\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Popover from \"@material-ui/core/Popover\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Button from \"@material-ui/core/Button\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  typography: {\r\n    padding: theme.spacing(2),\r\n  },\r\n}));\r\n\r\nexport default function SimplePopover({ weather }) {\r\n  const classes = useStyles();\r\n  const [anchorEl, setAnchorEl] = React.useState(null);\r\n\r\n  const handleClick = (event) => {\r\n    setAnchorEl(event.currentTarget);\r\n  };\r\n\r\n  const handleClose = () => {\r\n    setAnchorEl(null);\r\n  };\r\n\r\n  const open = Boolean(anchorEl);\r\n  const id = open ? \"simple-popover\" : undefined;\r\n\r\n  return (\r\n    <div>\r\n      <Button\r\n        aria-describedby={id}\r\n        variant=\"contained\"\r\n        onClick={handleClick}\r\n        style={{ backgroundColor: \"\" }}\r\n      >\r\n        More Information\r\n      </Button>\r\n      <Popover\r\n        id={id}\r\n        open={open}\r\n        anchorEl={anchorEl}\r\n        onClose={handleClose}\r\n        anchorOrigin={{\r\n          vertical: \"bottom\",\r\n          horizontal: \"center\",\r\n        }}\r\n        transformOrigin={{\r\n          vertical: \"top\",\r\n          horizontal: \"center\",\r\n        }}\r\n      >\r\n        <Typography className={classes.typography}>\r\n          <div>\r\n            Wind: {weather.wind.deg}m/h, {weather.wind.deg}°\r\n          </div>\r\n          <div>\r\n            Max: {Math.round(1.8 * (weather.main.temp_max - 273.15) + 32)}°F /{\" \"}\r\n            {\"\"}\r\n            {Math.round(weather.main.temp_max - 273.15)}°C\r\n          </div>\r\n          <div>\r\n            Min: {Math.round(1.8 * (weather.main.temp_min - 273.15) + 32)}°F /{\" \"}\r\n            {\"\"}\r\n            {Math.round(weather.main.temp_min - 273.15)}°C\r\n          </div>\r\n        </Typography>\r\n      </Popover>\r\n    </div>\r\n  );\r\n}\r\n","import React from \"react\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Card from \"@material-ui/core/Card\";\r\nimport CardActionArea from \"@material-ui/core/CardActionArea\";\r\nimport CardActions from \"@material-ui/core/CardActions\";\r\nimport CardContent from \"@material-ui/core/CardContent\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport SimplePopover from \"./SimplePopover\";\r\nimport \"./MediaCard.css\";\r\n\r\nconst useStyles = makeStyles({\r\n  rootSnow: {\r\n    marginTop: \"40px\",\r\n    borderRadius: \"20px\",\r\n    paddingTop: \"90px\",\r\n    paddingBottom: \"20px\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    textAlign: \"center\",\r\n    alignItems: \"center\",\r\n    width: \"400px\",\r\n    height: \"575px\",\r\n    backgroundSize: \"cover\",\r\n    backgroundPosition: \"center\",\r\n    backgroundImage:\r\n      \"url('https://www.si.edu/sites/default/files/newsdesk/press_releases/the_sun.jpg')\",\r\n  },\r\n\r\n  rootSunny: {\r\n    marginTop: \"40px\",\r\n    borderRadius: \"20px\",\r\n    paddingTop: \"90px\",\r\n    paddingBottom: \"20px\",\r\n    display: \"flex\",\r\n    flexDirection: \"column\",\r\n    textAlign: \"center\",\r\n    alignItems: \"center\",\r\n    width: \"400px\",\r\n    height: \"575px\",\r\n    backgroundSize: \"cover\",\r\n    backgroundImage:\r\n      \"url('http://blogs.studyinsweden.se/wp-content/uploads/2015/12/G1064208.jpg')\",\r\n  },\r\n\r\n  yellow: {\r\n    color: \"yellow\",\r\n  },\r\n\r\n  darkblue: {\r\n    color: \"darkblue\",\r\n  },\r\n});\r\n\r\nexport default function MediaCard({\r\n  query,\r\n  weather,\r\n  setQuery,\r\n  toggle,\r\n  setToggle,\r\n}) {\r\n  const classes = useStyles();\r\n\r\n  const w = weather.main.temp > 300;\r\n\r\n  return (\r\n    <div>\r\n      <Card className={w ? classes.rootSunny : classes.rootSnow}>\r\n        <div\r\n          style={{\r\n            display: \"flex\",\r\n            textAlign: \"center\",\r\n            alignItems: \"center\",\r\n            fontWeight: \"bold\",\r\n          }}\r\n        >\r\n          <div\r\n            className={w ? classes.yellow : classes.darkblue}\r\n            style={{\r\n              textAlign: \"center\",\r\n              alignItems: \"center\",\r\n              fontSize: \"45px\",\r\n            }}\r\n          >\r\n            Weather\r\n          </div>\r\n          <div\r\n            className={w ? classes.darkblue : classes.yellow}\r\n            style={{\r\n              textAlign: \"center\",\r\n              alignItems: \"center\",\r\n              fontSize: \"50px\",\r\n            }}\r\n          >\r\n            CHECK\r\n          </div>\r\n        </div>\r\n        <br></br>\r\n        <CardActionArea>\r\n          <CardContent>\r\n            {/* INPUT CITY */}\r\n            <input\r\n              onChange={(event) =>\r\n                setQuery({ ...query, city: event.target.value })\r\n              }\r\n              placeholder=\"city\"\r\n              style={{\r\n                borderRadius: \"10px\",\r\n                opacity: 0.7,\r\n                height: \"30px\",\r\n                width: \"250px\",\r\n                textAlign: \"center\",\r\n                alignItems: \"center\",\r\n                textTransform: \"uppercase\",\r\n                color: \"blue\",\r\n                fontSize: \"20px\",\r\n              }}\r\n            ></input>\r\n            <br></br>\r\n            <br></br>\r\n\r\n            {/* INPUT STATE */}\r\n            <div\r\n              className=\"stateCountry\"\r\n              style={{\r\n                display: \"flex\",\r\n                flexDirection: \"row\",\r\n                width: \"250px\",\r\n              }}\r\n            >\r\n              <input\r\n                className=\"itemstate\"\r\n                onChange={(event) =>\r\n                  setQuery({ ...query, state: event.target.value })\r\n                }\r\n                placeholder=\"state\"\r\n                style={{\r\n                  borderRadius: \"10px\",\r\n                  opacity: 0.7,\r\n                  height: \"30px\",\r\n                  width: \"90px\",\r\n                  textAlign: \"center\",\r\n                  alignItems: \"center\",\r\n                  textTransform: \"uppercase\",\r\n                  color: \"blue\",\r\n                  fontSize: \"20px\",\r\n                  marginLeft: \"57px\",\r\n                  marginRight: \"20px\",\r\n                }}\r\n              ></input>\r\n              <br></br>\r\n              <br></br>\r\n\r\n              {/* INPUT COUNTRY */}\r\n              <input\r\n                className=\"itemcountry\"\r\n                onChange={(event) =>\r\n                  setQuery({ ...query, country: event.target.value })\r\n                }\r\n                placeholder=\"country\"\r\n                style={{\r\n                  borderRadius: \"10px\",\r\n                  opacity: 0.7,\r\n                  height: \"30px\",\r\n                  width: \"136px\",\r\n                  textAlign: \"center\",\r\n                  alignItems: \"center\",\r\n                  textTransform: \"uppercase\",\r\n                  color: \"blue\",\r\n                  fontSize: \"20px\",\r\n                }}\r\n              ></input>\r\n            </div>\r\n            <br></br>\r\n            <br></br>\r\n\r\n            {/* SELECT LOCATION BUTTON */}\r\n            <button\r\n              onClick={() => setToggle(!toggle)}\r\n              style={{\r\n                borderWidth: 0.5,\r\n                borderRadius: \"5px\",\r\n                height: \"35px\",\r\n                width: \"180px\",\r\n              }}\r\n            >\r\n              SELECT LOCATION\r\n            </button>\r\n            <br></br>\r\n            <br></br>\r\n\r\n            {/* LOCATION DISPLAY */}\r\n            <div>\r\n              <Typography\r\n                style={{\r\n                  color: \"white\",\r\n                }}\r\n                variant=\"h4\"\r\n                color=\"textSecondary\"\r\n                component=\"h1\"\r\n              >\r\n                {weather.name}, {\"\"}\r\n                {weather.sys.country}\r\n              </Typography>\r\n              <br></br>\r\n\r\n              {/* TEMPERATURE DISPLAY */}\r\n              <Typography style={{ color: \"white\" }} variant=\"h4\" component=\"p\">\r\n                {Math.round(1.8 * (weather.main.temp - 273.15) + 32)}°F / {\"\"}\r\n                {Math.round(weather.main.temp - 273.15)}°C\r\n                <br></br>\r\n                {weather.main.humidity}% H\r\n              </Typography>\r\n            </div>\r\n            <br></br>\r\n            <br></br>\r\n\r\n            {/* DESCRIPTION DISPLAY */}\r\n            <Typography style={{ color: \"white\" }} variant=\"h5\" component=\"p\">\r\n              {weather.weather[0].description.toUpperCase()}\r\n            </Typography>\r\n          </CardContent>\r\n        </CardActionArea>\r\n        <CardActions>\r\n          <SimplePopover weather={weather} />\r\n        </CardActions>\r\n      </Card>\r\n    </div>\r\n  );\r\n}\r\n","import React, { useState, useEffect } from \"react\";\nimport \"./App.css\";\nimport axios from \"axios\";\nimport id from \"./id\";\nimport MediaCard from \"./component/MediaCard\";\n\nfunction App() {\n  const [weather, setWeather] = useState([]);\n  const [toggle, setToggle] = useState(true);\n  const [query, setQuery] = useState({\n    city: \"Charleston\",\n    state: \"SC\",\n    country: \"USA\",\n  });\n\n  useEffect(() => {\n    async function getData() {\n      try {\n        const queryString = `${query.city},${query.state},${query.country}`;\n        const response = await axios.get(\n          `https://api.openweathermap.org/data/2.5/weather?q=${queryString}&appid=${id}`\n        );\n        setWeather(response.data);\n      } catch (error) {\n        console.log(error);\n      }\n    }\n    getData();\n  }, [toggle]);\n\n  return (\n    <div className=\"App\">\n      {weather.main && (\n        <MediaCard\n          query={query}\n          weather={weather}\n          setQuery={setQuery}\n          setToggle={setToggle}\n          toggle={toggle}\n        ></MediaCard>\n      )}\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}